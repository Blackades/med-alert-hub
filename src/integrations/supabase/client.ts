
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from "@/components/ui/use-toast";

const SUPABASE_URL = "https://bjgcteapggmoiaudmslb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJqZ2N0ZWFwZ2dtb2lhdWRtc2xiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAwNDUyNzgsImV4cCI6MjA1NTYyMTI3OH0.ptHyA7I0Ms1dOa0ubwH93_h6LNjT42sa8hAjPkxWpBk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to track medication inventory
export const updateMedicationInventory = async (medicationId: string, newQuantity: number) => {
  try {
    // Using a raw query approach to avoid type issues
    const { data, error } = await supabase
      .rpc('update_medication_inventory', {
        p_medication_id: medicationId,
        p_new_quantity: newQuantity
      });
    
    if (error) throw error;
    return { success: true, data };
  } catch (error) {
    console.error('Error updating medication inventory:', error);
    toast({
      title: "Inventory Update Failed",
      description: "There was a problem updating the medication inventory.",
      variant: "destructive",
    });
    return { success: false, error };
  }
};

// Helper function to refill medication inventory
export const refillMedication = async (
  medicationId: string, 
  quantity: number, 
  notes?: string
) => {
  try {
    const response = await supabase.functions.invoke('medication-refill', {
      body: {
        medicationId,
        refillQuantity: quantity,
        date: new Date().toISOString(),
        notes
      }
    });
    
    if (response.error) {
      throw new Error(response.error.message || 'Failed to refill medication');
    }
    
    toast({
      title: "Medication Refilled",
      description: `Successfully added ${quantity} units to your medication.`,
      variant: "default",
    });
    
    return { success: true, data: response.data };
  } catch (error) {
    console.error('Error refilling medication:', error);
    toast({
      title: "Refill Failed",
      description: "There was a problem refilling your medication.",
      variant: "destructive",
    });
    return { success: false, error };
  }
};

// Helper function to handle medication status (take/miss/skip)
export const handleMedicationStatus = async (
  medicationId: string,
  action: 'take' | 'miss' | 'skip',
  reason?: string
) => {
  try {
    const response = await supabase.functions.invoke('handle-medication-status', {
      body: {
        medicationId,
        action,
        reason
      }
    });
    
    if (response.error) {
      throw new Error(response.error.message || `Failed to ${action} medication`);
    }
    
    const actionText = action === 'take' ? 'taken' : action === 'miss' ? 'missed' : 'skipped';
    
    toast({
      title: `Medication ${actionText.charAt(0).toUpperCase() + actionText.slice(1)}`,
      description: `Your medication has been marked as ${actionText}.`,
      variant: "default",
    });
    
    return { success: true, data: response.data };
  } catch (error) {
    console.error(`Error handling medication ${action}:`, error);
    toast({
      title: "Action Failed",
      description: `There was a problem marking your medication as ${action === 'take' ? 'taken' : action === 'miss' ? 'missed' : 'skipped'}.`,
      variant: "destructive",
    });
    return { success: false, error };
  }
};
