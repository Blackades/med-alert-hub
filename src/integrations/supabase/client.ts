
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://bjgcteapggmoiaudmslb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJqZ2N0ZWFwZ2dtb2lhdWRtc2xiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAwNDUyNzgsImV4cCI6MjA1NTYyMTI3OH0.ptHyA7I0Ms1dOa0ubwH93_h6LNjT42sa8hAjPkxWpBk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to track medication inventory
export const updateMedicationInventory = async (medicationId: string, newQuantity: number) => {
  try {
    const { data, error } = await supabase
      .from('medication_inventory')
      .update({ current_quantity: newQuantity, last_updated: new Date().toISOString() })
      .eq('medication_id', medicationId)
      .select();
    
    if (error) throw error;
    return { success: true, data };
  } catch (error) {
    console.error('Error updating medication inventory:', error);
    return { success: false, error };
  }
};

// Helper function to refill medication inventory
export const refillMedication = async (
  medicationId: string, 
  quantity: number, 
  notes?: string
) => {
  try {
    const response = await supabase.functions.invoke('medication-refill', {
      body: {
        medicationId,
        refillQuantity: quantity,
        date: new Date().toISOString(),
        notes
      }
    });
    
    if (!response.data || response.error) {
      throw new Error(response.error?.message || 'Failed to refill medication');
    }
    
    return { success: true, data: response.data };
  } catch (error) {
    console.error('Error refilling medication:', error);
    return { success: false, error };
  }
};
